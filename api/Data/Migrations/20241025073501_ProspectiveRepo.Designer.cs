// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241025073501_ProspectiveRepo")]
    partial class ProspectiveRepo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Entities.Admin.AttendanceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasFilter("[Status] IS NOT NULL");

                    b.HasIndex("StatusId")
                        .IsUnique();

                    b.ToTable("AttendanceStatuses");
                });

            modelBuilder.Entity("api.Entities.Admin.CallRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConcludedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("CallRecords");
                });

            modelBuilder.Entity("api.Entities.Admin.CallRecordItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdvisoryBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CallRecordId")
                        .HasColumnType("int");

                    b.Property<string>("ContactResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfContact")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GistOfDiscussions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingOutgoing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextActionOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CallRecordId");

                    b.ToTable("CallRecordItems");
                });

            modelBuilder.Entity("api.Entities.Admin.CandidateFlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AirportOfBoarding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirportOfDestination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirportVia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CvRefId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfFlight")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepId")
                        .HasColumnType("int");

                    b.Property<int>("DepItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ETA_Destination")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ETA_Via")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ETD_Boarding")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ETD_Via")
                        .HasColumnType("datetime2");

                    b.Property<string>("FightNoVia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("CandidateFlights");
                });

            modelBuilder.Entity("api.Entities.Admin.CandidateFlightGrp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AirlineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirportOfBoarding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirportOfDestination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AirportVia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfFlight")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ETA_Destination")
                        .HasColumnType("datetime2");

                    b.Property<string>("ETA_DestinationString")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime?>("ETA_Via")
                        .HasColumnType("datetime2");

                    b.Property<string>("ETA_ViaString")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime>("ETD_Boarding")
                        .HasColumnType("datetime2");

                    b.Property<string>("ETD_BoardingString")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<DateTime?>("ETD_Via")
                        .HasColumnType("datetime2");

                    b.Property<string>("ETD_ViaString")
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("FightNoVia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullPath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightNo");

                    b.ToTable("CandidateFlightGrps");
                });

            modelBuilder.Entity("api.Entities.Admin.CandidateFlightItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int>("CandidateFlightGrpId")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CvRefId")
                        .HasColumnType("int");

                    b.Property<int>("DepId")
                        .HasColumnType("int");

                    b.Property<int>("DepItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateFlightGrpId");

                    b.HasIndex("CvRefId")
                        .IsUnique()
                        .HasFilter("CvRefId != 0");

                    b.ToTable("CandidateFlightItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.AcknowledgeToClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAcknowledged")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientEmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("AckanowledgeToClients");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.AgencySpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialtyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AgencySpecialties");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Add")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Add2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlackListed")
                        .HasColumnType("bit");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerName", "City")
                        .IsUnique()
                        .HasFilter("CustomerName IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerSuggestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackNo")
                        .HasColumnType("int");

                    b.Property<string>("GradeAssessedByClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowReceived")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerFeedbacks");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IndustryId");

                    b.ToTable("CustomerIndustries");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Divn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriorityAccount")
                        .HasColumnType("int");

                    b.Property<int>("PriorityAdmin")
                        .HasColumnType("int");

                    b.Property<int>("PriorityHR")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "OfficialName")
                        .IsUnique();

                    b.ToTable("CustomerOfficials");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerReviews");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedByUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerReviewId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerReviewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReviewId");

                    b.ToTable("CustomerReviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.FeedbackItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerFeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("FeedbackGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerFeedbackId");

                    b.ToTable("FeedbackItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.FeedbackQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FeedbackGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FeedbackQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AadharNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("api.Entities.Admin.EmployeeAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAttachments");
                });

            modelBuilder.Entity("api.Entities.Admin.FlightDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Airline")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("AirlineVia")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AirportOfBoarding")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AirportOfDestination")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AirportVia")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ETA_Destination")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ETA_Via")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ETD_Boarding")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ETD_Via")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FightNoVia")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FlightNo")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("FlightNo")
                        .IsUnique()
                        .HasFilter("[FlightNo] IS NOT NULL");

                    b.ToTable("FlightDetails");
                });

            modelBuilder.Entity("api.Entities.Admin.Intervw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InterviewDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InterviewDateUpto")
                        .HasColumnType("datetime2");

                    b.Property<string>("InterviewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterviewVenues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Intervws");
                });

            modelBuilder.Entity("api.Entities.Admin.IntervwAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendanceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("IntervwItemCandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IntervwItemCandidateId");

                    b.HasIndex("IntervwItemCandidateId", "Status")
                        .IsUnique()
                        .HasFilter("[Status] IS NOT NULL");

                    b.ToTable("IntervwAttendances");
                });

            modelBuilder.Entity("api.Entities.Admin.IntervwItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EstimatedMinsToInterviewEachCandidate")
                        .HasColumnType("int");

                    b.Property<string>("InterviewMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterviewVenue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterviewerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntervwId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitePhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteRepName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueCityAndPIN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IntervwId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("IntervwItems");
                });

            modelBuilder.Entity("api.Entities.Admin.IntervwItemCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentFileNameWithPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InterviewItemId")
                        .HasColumnType("int");

                    b.Property<string>("InterviewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InterviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InterviewerRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IntervwItemId")
                        .HasColumnType("int");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProspectiveCandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledFrom")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IntervwItemId");

                    b.HasIndex("CandidateId", "InterviewItemId")
                        .IsUnique()
                        .HasFilter("CandidateId <> 0");

                    b.ToTable("IntervwItemCandidates");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmigProcessInchargeUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HrExecAssignedToUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalProcessInchargeUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<bool>("ReleasedForProduction")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TravelProcessInchargeUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisaProcessInchargeUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ContractReviews");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<int>("ContractReviewId")
                        .HasColumnType("int");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<string>("HrExecUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequireAssess")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ReviewItemStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractReviewId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("ContractReviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItemQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractReviewItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatoryTrue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResponseBoolean")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Response")
                        .HasColumnType("bit");

                    b.Property<string>("ResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewParameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractReviewItemId");

                    b.ToTable("ContractReviewItemQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItemStddQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Button2Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMandatoryTrue")
                        .HasColumnType("bit");

                    b.Property<string>("ResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewParameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<bool>("TextInput")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ContractReviewItemStddQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.JobDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpDesiredMax")
                        .HasColumnType("int");

                    b.Property<int>("ExpDesiredMin")
                        .HasColumnType("int");

                    b.Property<string>("JobDescInBrief")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("QualificationDesired")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("JobDescriptions");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityOfWorking")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CompleteBy")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContractReviewId")
                        .HasColumnType("int");

                    b.Property<string>("ContractReviewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ForwardedToHRDeptOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("OrderRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderRefDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "OrderDate", "CityOfWorking")
                        .IsUnique()
                        .HasFilter("[CityOfWorking] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDesigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignedByUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderAssessments");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderAssessmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssessmentRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDesigned")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequireCandidateAssessment")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OrderAssessmentId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("OrderAssessmentItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderAssessmentItemQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("OrderAssessmentItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("OrderAssessmentItemId", "Question")
                        .IsUnique()
                        .HasFilter("[Question] IS NOT NULL");

                    b.ToTable("OrderAssessmentItemQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderExtn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcknowledgedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AssessmentDesignedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContractReviewId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContractReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContratReviewResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ForwardedToHROn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderExtns");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<string>("CustomerCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("OrderForwardCategories");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategoryOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerOfficialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateForwarded")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailIdForwardedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderForwardCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNoForwardedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppNoForwardedTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderForwardCategoryId", "CustomerOfficialId")
                        .IsUnique();

                    b.ToTable("OrderForwardCategoryOfficials");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardToAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("int");

                    b.Property<string>("customerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderForwardToAgents");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardToHR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOnlyForwarded")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId", "DateOnlyForwarded")
                        .IsUnique();

                    b.ToTable("OrderForwardToHRs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CompleteBefore")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCVs")
                        .HasColumnType("int");

                    b.Property<int>("MinCVs")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("RequireAssessment")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewItemStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Remuneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractPeriodInMonths")
                        .HasColumnType("int");

                    b.Property<int>("FoodAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("FoodNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("FoodProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("HousingAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("HousingNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("HousingProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("LeaveAirfareEntitlementAfterMonths")
                        .HasColumnType("int");

                    b.Property<int>("LeavePerYearInDays")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("OtherAllowance")
                        .HasColumnType("int");

                    b.Property<string>("SalaryCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("SalaryMax")
                        .HasColumnType("int");

                    b.Property<int>("SalaryMin")
                        .HasColumnType("int");

                    b.Property<int>("TransportAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("TransportNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("TransportProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("WorkHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("Remunerations");
                });

            modelBuilder.Entity("api.Entities.Deployments.Dep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityOfWorking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CurrentStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CvRefId")
                        .HasColumnType("int");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SelectedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CvRefId")
                        .IsUnique();

                    b.ToTable("Deps");
                });

            modelBuilder.Entity("api.Entities.Deployments.DepItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepId")
                        .HasColumnType("int");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NextSequence")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextSequenceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepId", "Sequence")
                        .IsUnique();

                    b.ToTable("DepItems");
                });

            modelBuilder.Entity("api.Entities.Deployments.DeployStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NextSequence")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkingDaysReqdForNextStage")
                        .HasColumnType("int");

                    b.Property<bool>("isOptional")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DeployStatuses");
                });

            modelBuilder.Entity("api.Entities.Finance.COA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Divn")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<long>("OpBalance")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountName")
                        .IsUnique();

                    b.ToTable("COAs");
                });

            modelBuilder.Entity("api.Entities.Finance.FinanceVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("CoaId")
                        .HasColumnType("int");

                    b.Property<string>("Divn")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VoucherDated")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoucherNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinanceVouchers");
                });

            modelBuilder.Entity("api.Entities.Finance.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("COAId")
                        .HasColumnType("int");

                    b.Property<int>("CVRefId")
                        .HasColumnType("int");

                    b.Property<string>("Divn")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VoucherDated")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoucherNo")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentSizeInBytes")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FinanceVoucherId")
                        .HasColumnType("int");

                    b.Property<string>("UploadedByUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinanceVoucherId");

                    b.HasIndex("VoucherId");

                    b.HasIndex("FileName", "FinanceVoucherId")
                        .IsUnique()
                        .HasFilter("[FileName] IS NOT NULL");

                    b.ToTable("VoucherAttachments");
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoaId")
                        .HasColumnType("int");

                    b.Property<long>("Cr")
                        .HasColumnType("bigint");

                    b.Property<long>("Dr")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DrEntryApproved")
                        .HasColumnType("bit");

                    b.Property<string>("DrEntryApprovedByUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DrEntryApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinanceVoucherId")
                        .HasColumnType("int");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FinanceVoucherId");

                    b.ToTable("VoucherEntries");
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("COAId")
                        .HasColumnType("int");

                    b.Property<long>("Cr")
                        .HasColumnType("bigint");

                    b.Property<long>("Dr")
                        .HasColumnType("bigint");

                    b.Property<bool>("DrEntryApproved")
                        .HasColumnType("bit");

                    b.Property<string>("DrEntryApprovedByAppUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DrEntryApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherItem");
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentQBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId")
                        .IsUnique();

                    b.ToTable("AssessmentQBanks");
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentQStdd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Question")
                        .IsUnique()
                        .HasFilter("[Question] IS NOT NULL");

                    b.HasIndex("QuestionNo")
                        .IsUnique();

                    b.ToTable("AssessmentQStdds");
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentStddQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessmentQBankId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandardQ")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("QNo")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentQBankId");

                    b.ToTable("AssessmentStddQs");
                });

            modelBuilder.Entity("api.Entities.HR.CVRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVReviewId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("HRExecId")
                        .HasColumnType("int");

                    b.Property<string>("HRExecUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("RefStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReferredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelectionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SelectionStatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId", "CandidateId")
                        .IsUnique();

                    b.ToTable("CVRefs");
                });

            modelBuilder.Entity("api.Entities.HR.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AadharNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int?>("CVRefId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ecnr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("KnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotificationDesired")
                        .HasColumnType("bit");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PpNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessedByEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("AssessedByEmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AssessedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CVRefId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryRefAndName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChecklistHRId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequireInternalReview")
                        .HasColumnType("bit");

                    b.Property<int>("TaskIdDocControllerAdmin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("CandidateAssessments");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AssessedOnTheParameter")
                        .HasColumnType("bit");

                    b.Property<string>("AssessmentGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CandidateAssessmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateAssessmentId");

                    b.ToTable("CandidatesAssessmentItems");
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<int>("ChargesAgreed")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ChecklistedOk")
                        .HasColumnType("bit");

                    b.Property<bool>("ExceptionApproved")
                        .HasColumnType("bit");

                    b.Property<string>("ExceptionApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExceptionApprovedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HrExecComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HrExecUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("OrderItemId", "CandidateId")
                        .IsUnique();

                    b.ToTable("ChecklistHRs");
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHRItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accepts")
                        .HasColumnType("bit");

                    b.Property<int>("ChecklistHRId")
                        .HasColumnType("int");

                    b.Property<string>("Exceptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MandatoryTrue")
                        .HasColumnType("bit");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistHRId");

                    b.ToTable("ChecklistHRItems");
                });

            modelBuilder.Entity("api.Entities.HR.EmployeeOtherSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("SkillDataId")
                        .HasColumnType("int");

                    b.Property<string>("SkillLevelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeOtherSkills");
                });

            modelBuilder.Entity("api.Entities.HR.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<int>("ChargesFixed")
                        .HasColumnType("int");

                    b.Property<string>("ConclusionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractPeriodInMonths")
                        .HasColumnType("int");

                    b.Property<int>("CvRefId")
                        .HasColumnType("int");

                    b.Property<int>("FoodAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("FoodNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("FoodProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("HousingAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("HousingNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("HousingProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("LeaveAirfareEntitlementAfterMonths")
                        .HasColumnType("int");

                    b.Property<int>("LeavePerYearInDays")
                        .HasColumnType("int");

                    b.Property<bool>("OfferAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OfferAcceptedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfferAttachmentFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OfferAttachmentFullPath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OfferConclusionRegisteredByUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OtherAllowance")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SelectedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SelectionDecisionId")
                        .HasColumnType("int");

                    b.Property<int>("TransportAllowance")
                        .HasColumnType("int");

                    b.Property<bool>("TransportNotProvided")
                        .HasColumnType("bit");

                    b.Property<bool>("TransportProvidedFree")
                        .HasColumnType("bit");

                    b.Property<int>("WeeklyHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CvRefId")
                        .IsUnique();

                    b.HasIndex("SelectionDecisionId")
                        .IsUnique()
                        .HasFilter("SelectionDecisionId is NOT NULL");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("api.Entities.HR.HRSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillLevelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("HRSkills");
                });

            modelBuilder.Entity("api.Entities.HR.ProspectiveCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Age")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AlternateEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternateNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CandidateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ctc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<string>("PersonId")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("PersonType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ResumeTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Source")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("ProspectiveCandidates");
                });

            modelBuilder.Entity("api.Entities.HR.SelectionDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("CandidateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<string>("CityOfWorking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CvRefId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SelectedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SelectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SelectionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CvRefId")
                        .IsUnique();

                    b.ToTable("SelectionDecisions");
                });

            modelBuilder.Entity("api.Entities.HR.UserAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UploadedLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedbyUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserAttachments");
                });

            modelBuilder.Entity("api.Entities.HR.UserExp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool?>("CurrentJob")
                        .HasColumnType("bit");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MonthlySalaryDrawn")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkedUpto")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserExps");
                });

            modelBuilder.Entity("api.Entities.HR.UserPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("api.Entities.HR.UserProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserProfessions");
                });

            modelBuilder.Entity("api.Entities.HR.UserQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("api.Entities.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("api.Entities.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("api.Entities.Master.CategoryAssessmentQBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessmentQBankId")
                        .HasColumnType("int");

                    b.Property<bool>("IsStandardQ")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("QNo")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryAssessmentQBanks");
                });

            modelBuilder.Entity("api.Entities.Master.ChecklistHRData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Parameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChecklistHRDatas");
                });

            modelBuilder.Entity("api.Entities.Master.Help", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Topic")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Topic")
                        .IsUnique()
                        .HasFilter("[Topic] IS NOT NULL");

                    b.ToTable("Helps");
                });

            modelBuilder.Entity("api.Entities.Master.HelpItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HelpId")
                        .HasColumnType("int");

                    b.Property<string>("HelpText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HelpId", "Sequence")
                        .IsUnique();

                    b.ToTable("HelpItems");
                });

            modelBuilder.Entity("api.Entities.Master.HelpSubItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HelpItemId")
                        .HasColumnType("int");

                    b.Property<string>("SubText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("helpId")
                        .HasColumnType("int");

                    b.Property<int>("sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HelpItemId");

                    b.ToTable("HelpSubItem");
                });

            modelBuilder.Entity("api.Entities.Master.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IndustryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryName")
                        .IsUnique()
                        .HasFilter("[IndustryName] IS NOT NULL");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("api.Entities.Master.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProfessionName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionName")
                        .IsUnique()
                        .HasFilter("[ProfessionName] IS NOT NULL");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("api.Entities.Master.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("QualificationName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QualificationName")
                        .IsUnique()
                        .HasFilter("[QualificationName] IS NOT NULL");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("api.Entities.Master.SkillData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillDatas");
                });

            modelBuilder.Entity("api.Entities.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BCCEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CCEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CvRefId")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMessageSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MessageComposedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("api.Entities.Messages.MessageComposeSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LineText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SrNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MessageComposeSources");
                });

            modelBuilder.Entity("api.Entities.Tasks.AppTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationNo")
                        .HasColumnType("int");

                    b.Property<string>("AssignedByUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CVRefId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateAssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompleteBy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HistoryItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("PostTaskAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskType")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TaskType");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("api.Entities.Tasks.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppTaskId")
                        .HasColumnType("int");

                    b.Property<string>("NextFollowupByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextFollowupOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("api.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.CallRecordItem", b =>
                {
                    b.HasOne("api.Entities.Admin.CallRecord", null)
                        .WithMany("CallRecordItems")
                        .HasForeignKey("CallRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.CandidateFlightItem", b =>
                {
                    b.HasOne("api.Entities.Admin.CandidateFlightGrp", null)
                        .WithMany("CandidateFlightItems")
                        .HasForeignKey("CandidateFlightGrpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Client.AgencySpecialty", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.Customer", null)
                        .WithMany("AgencySpecialties")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerIndustry", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.Customer", "Customer")
                        .WithMany("CustomerIndustries")
                        .HasForeignKey("CustomerId");

                    b.HasOne("api.Entities.Master.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.Navigation("Customer");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerOfficial", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.Customer", null)
                        .WithMany("CustomerOfficials")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerReviewItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.CustomerReview", null)
                        .WithMany("CustomerReviewItems")
                        .HasForeignKey("CustomerReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Client.FeedbackItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.CustomerFeedback", null)
                        .WithMany("FeedbackItems")
                        .HasForeignKey("CustomerFeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.EmployeeAttachment", b =>
                {
                    b.HasOne("api.Entities.Admin.Employee", null)
                        .WithMany("EmployeeAttachments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.IntervwItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Intervw", null)
                        .WithMany("InterviewItems")
                        .HasForeignKey("IntervwId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.IntervwItemCandidate", b =>
                {
                    b.HasOne("api.Entities.Admin.IntervwItem", null)
                        .WithMany("InterviewItemCandidates")
                        .HasForeignKey("IntervwItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReview", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.Order", "Order")
                        .WithOne("ContractReview")
                        .HasForeignKey("api.Entities.Admin.Order.ContractReview", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.ContractReview", null)
                        .WithMany("ContractReviewItems")
                        .HasForeignKey("ContractReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Admin.Order.OrderItem", null)
                        .WithOne("ContractReviewItem")
                        .HasForeignKey("api.Entities.Admin.Order.ContractReviewItem", "OrderItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItemQ", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.ContractReviewItem", null)
                        .WithMany("ContractReviewItemQs")
                        .HasForeignKey("ContractReviewItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.JobDescription", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderItem", null)
                        .WithOne("JobDescription")
                        .HasForeignKey("api.Entities.Admin.Order.JobDescription", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Order", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderAssessmentItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderAssessment", null)
                        .WithMany("OrderAssessmentItems")
                        .HasForeignKey("OrderAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderAssessmentItemQ", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderAssessmentItem", null)
                        .WithMany("OrderAssessmentItemQs")
                        .HasForeignKey("OrderAssessmentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Admin.Order.OrderItem", null)
                        .WithMany("OrderItemAssessmentQs")
                        .HasForeignKey("OrderItemId");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategoryOfficial", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderForwardCategory", null)
                        .WithMany("OrderForwardCategoryOfficials")
                        .HasForeignKey("OrderForwardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardToAgent", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.Order", null)
                        .WithMany("DLForwarded")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Master.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Remuneration", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderItem", null)
                        .WithOne("Remuneration")
                        .HasForeignKey("api.Entities.Admin.Order.Remuneration", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Deployments.Dep", b =>
                {
                    b.HasOne("api.Entities.HR.CVRef", "CVRef")
                        .WithMany("Deps")
                        .HasForeignKey("CvRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVRef");
                });

            modelBuilder.Entity("api.Entities.Deployments.DepItem", b =>
                {
                    b.HasOne("api.Entities.Deployments.Dep", null)
                        .WithMany("DepItems")
                        .HasForeignKey("DepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherAttachment", b =>
                {
                    b.HasOne("api.Entities.Finance.FinanceVoucher", null)
                        .WithMany("VoucherAttachments")
                        .HasForeignKey("FinanceVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Finance.Voucher", "Voucher")
                        .WithMany("VoucherAttachments")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherEntry", b =>
                {
                    b.HasOne("api.Entities.Finance.FinanceVoucher", null)
                        .WithMany("VoucherEntries")
                        .HasForeignKey("FinanceVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherItem", b =>
                {
                    b.HasOne("api.Entities.Finance.Voucher", null)
                        .WithMany("VoucherItems")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentStddQ", b =>
                {
                    b.HasOne("api.Entities.HR.AssessmentQBank", null)
                        .WithMany("AssessmentStddQs")
                        .HasForeignKey("AssessmentQBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.Candidate", b =>
                {
                    b.HasOne("api.Entities.HR.CVRef", null)
                        .WithMany("Candidates")
                        .HasForeignKey("CVRefId");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessment", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessmentItem", b =>
                {
                    b.HasOne("api.Entities.HR.CandidateAssessment", null)
                        .WithMany("CandidateAssessmentItems")
                        .HasForeignKey("CandidateAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHR", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Admin.Order.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHRItem", b =>
                {
                    b.HasOne("api.Entities.HR.ChecklistHR", null)
                        .WithMany("ChecklistHRItems")
                        .HasForeignKey("ChecklistHRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.EmployeeOtherSkill", b =>
                {
                    b.HasOne("api.Entities.Admin.Employee", null)
                        .WithMany("EmployeeOtherSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.Employment", b =>
                {
                    b.HasOne("api.Entities.HR.SelectionDecision", null)
                        .WithOne("Employment")
                        .HasForeignKey("api.Entities.HR.Employment", "SelectionDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.HRSkill", b =>
                {
                    b.HasOne("api.Entities.Admin.Employee", null)
                        .WithMany("HRSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.SelectionDecision", b =>
                {
                    b.HasOne("api.Entities.HR.CVRef", "CVRef")
                        .WithMany()
                        .HasForeignKey("CvRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVRef");
                });

            modelBuilder.Entity("api.Entities.HR.UserAttachment", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserAttachments")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.UserExp", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserExperiences")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.UserPhone", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserPhones")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.UserProfession", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserProfessions")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.UserQualification", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserQualifications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("api.Entities.Identity.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Identity.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Entities.Master.HelpItem", b =>
                {
                    b.HasOne("api.Entities.Master.Help", null)
                        .WithMany("HelpItems")
                        .HasForeignKey("HelpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Master.HelpSubItem", b =>
                {
                    b.HasOne("api.Entities.Master.HelpItem", null)
                        .WithMany("HelpSubItems")
                        .HasForeignKey("HelpItemId");
                });

            modelBuilder.Entity("api.Entities.Messages.Message", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.HasOne("api.Entities.Identity.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("api.Entities.Tasks.TaskItem", b =>
                {
                    b.HasOne("api.Entities.Tasks.AppTask", null)
                        .WithMany("TaskItems")
                        .HasForeignKey("AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.CallRecord", b =>
                {
                    b.Navigation("CallRecordItems");
                });

            modelBuilder.Entity("api.Entities.Admin.CandidateFlightGrp", b =>
                {
                    b.Navigation("CandidateFlightItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.Customer", b =>
                {
                    b.Navigation("AgencySpecialties");

                    b.Navigation("CustomerIndustries");

                    b.Navigation("CustomerOfficials");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerFeedback", b =>
                {
                    b.Navigation("FeedbackItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerReview", b =>
                {
                    b.Navigation("CustomerReviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Employee", b =>
                {
                    b.Navigation("EmployeeAttachments");

                    b.Navigation("EmployeeOtherSkills");

                    b.Navigation("HRSkills");
                });

            modelBuilder.Entity("api.Entities.Admin.Intervw", b =>
                {
                    b.Navigation("InterviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.IntervwItem", b =>
                {
                    b.Navigation("InterviewItemCandidates");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReview", b =>
                {
                    b.Navigation("ContractReviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItem", b =>
                {
                    b.Navigation("ContractReviewItemQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Order", b =>
                {
                    b.Navigation("ContractReview");

                    b.Navigation("DLForwarded");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderAssessment", b =>
                {
                    b.Navigation("OrderAssessmentItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderAssessmentItem", b =>
                {
                    b.Navigation("OrderAssessmentItemQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategory", b =>
                {
                    b.Navigation("OrderForwardCategoryOfficials");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderItem", b =>
                {
                    b.Navigation("ContractReviewItem");

                    b.Navigation("JobDescription");

                    b.Navigation("OrderItemAssessmentQs");

                    b.Navigation("Remuneration");
                });

            modelBuilder.Entity("api.Entities.Deployments.Dep", b =>
                {
                    b.Navigation("DepItems");
                });

            modelBuilder.Entity("api.Entities.Finance.FinanceVoucher", b =>
                {
                    b.Navigation("VoucherAttachments");

                    b.Navigation("VoucherEntries");
                });

            modelBuilder.Entity("api.Entities.Finance.Voucher", b =>
                {
                    b.Navigation("VoucherAttachments");

                    b.Navigation("VoucherItems");
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentQBank", b =>
                {
                    b.Navigation("AssessmentStddQs");
                });

            modelBuilder.Entity("api.Entities.HR.CVRef", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Deps");
                });

            modelBuilder.Entity("api.Entities.HR.Candidate", b =>
                {
                    b.Navigation("UserAttachments");

                    b.Navigation("UserExperiences");

                    b.Navigation("UserPhones");

                    b.Navigation("UserProfessions");

                    b.Navigation("UserQualifications");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessment", b =>
                {
                    b.Navigation("CandidateAssessmentItems");
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHR", b =>
                {
                    b.Navigation("ChecklistHRItems");
                });

            modelBuilder.Entity("api.Entities.HR.SelectionDecision", b =>
                {
                    b.Navigation("Employment");
                });

            modelBuilder.Entity("api.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("api.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("api.Entities.Master.Help", b =>
                {
                    b.Navigation("HelpItems");
                });

            modelBuilder.Entity("api.Entities.Master.HelpItem", b =>
                {
                    b.Navigation("HelpSubItems");
                });

            modelBuilder.Entity("api.Entities.Tasks.AppTask", b =>
                {
                    b.Navigation("TaskItems");
                });
#pragma warning restore 612, 618
        }
    }
}
