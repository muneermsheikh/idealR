// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240523221157_ApiFinalized")]
    partial class ApiFinalized
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Entities.Admin.Client.AgencySpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialtyName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AgencySpecialties");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Add")
                        .HasColumnType("TEXT");

                    b.Property<string>("Add2")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBlackListed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerName", "City")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerIndustry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerOfficialId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerOfficialId");

                    b.HasIndex("IndustryId");

                    b.ToTable("CustomerIndustries");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Designation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Divn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId", "OfficialName")
                        .IsUnique();

                    b.ToTable("CustomerOfficials");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerReviews");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovedBySupUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ApprovedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerReviewDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ReviewTransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerReviewId");

                    b.ToTable("CustomerReviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AadharNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address2")
                        .HasColumnType("TEXT");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfJoining")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeePhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeePhone2")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeQualifications")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialMobileNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfficialPhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Qualifications")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("api.Entities.Admin.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("HowReceived")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("IssuedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("ReceivedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("api.Entities.Admin.FeedbackItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FeedbackGroup")
                        .HasColumnType("TEXT");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeedbackQNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FeedbackQuestion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextForLevel1")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextForLevel2")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextForLevel3")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextForLevel4")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackItems");
                });

            modelBuilder.Entity("api.Entities.Admin.FeedbackStddQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FeedbackGroup")
                        .HasColumnType("TEXT");

                    b.Property<int>("FeedbackQNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FeedbackQuestion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextForLevel1")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextForLevel2")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextForLevel3")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextForLevel4")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("feedbackStddQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ReleasedForProduction")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewedByName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("ContractReviews");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireAssess")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewItemStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractReviewId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("ContractReviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItemQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractReviewItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatoryTrue")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsResponseBoolean")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Response")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponseText")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewParameter")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ContractReviewItemId");

                    b.ToTable("ContractReviewItemQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItemStddQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Button2Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("ButtonText")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMandatoryTrue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponseText")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewParameter")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TextInput")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ContractReviewItemStddQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.JobDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpDesiredMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpDesiredMin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobDescInBrief")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualificationDesired")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("JobDescriptions");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityOfWorking")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("CompleteBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ContractReviewId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContractReviewStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("ForwardedToHRDeptOn")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderRef")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("OrderRefDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderForwardToAgentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderForwardToAgentId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("OrderForwardCategories");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategoryOfficial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AgentName")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerOfficialId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOnlyForwarded")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailIdForwardedTo")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderForwardCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNoForwardedTo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("WhatsAppNoForwardedTo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderForwardCategoryId", "DateOnlyForwarded", "CustomerOfficialId")
                        .IsUnique();

                    b.ToTable("OrderForwardCategoryOfficials");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardToAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerCity")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("customerName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderForwardToAgents");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardToHR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOnlyForwarded")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId", "DateOnlyForwarded")
                        .IsUnique();

                    b.ToTable("OrderForwardToHRs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charges")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Checked")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("CompleteBefore")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCVs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinCVs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewItemStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceFrom")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderItemAssessmentQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("OrderItemAssessmentId", "Question")
                        .IsUnique();

                    b.ToTable("OrderItemAssessmentQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Remuneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractPeriodInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FoodNotProvided")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FoodProvidedFree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HousingAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HousingNotProvided")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HousingProvidedFree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveAirfareEntitlementAfterMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeavePerYearInDays")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OtherAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalaryCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<int>("SalaryMax")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SalaryMin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransportAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TransportNotProvided")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TransportProvidedFree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkHours")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("Remunerations");
                });

            modelBuilder.Entity("api.Entities.Admin.UserHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Age")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternateEmailId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternatePhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CandidateName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryRef")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Concluded")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcludedByUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("ConcludedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Education")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResumeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StatusDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkExperience")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique()
                        .HasFilter("CandidateId Is Null");

                    b.ToTable("UserHistories");
                });

            modelBuilder.Entity("api.Entities.Admin.UserHistoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactResult")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfContact")
                        .HasColumnType("TEXT");

                    b.Property<string>("GistOfDiscussions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IncomingOutgoing")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserHistoryId");

                    b.ToTable("UserHistoryItems");
                });

            modelBuilder.Entity("api.Entities.Deployments.Dep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("SelectedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId")
                        .IsUnique();

                    b.ToTable("Deps");
                });

            modelBuilder.Entity("api.Entities.Deployments.DepItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextSequence")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("NextSequenceDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepId", "Sequence")
                        .IsUnique();

                    b.ToTable("DepItems");
                });

            modelBuilder.Entity("api.Entities.Deployments.DeployStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextSequence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkingDaysReqdForNextStage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isOptional")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DeployStatuses");
                });

            modelBuilder.Entity("api.Entities.Deployments.Deployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextSequence")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("NextSequenceDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Deployments");
                });

            modelBuilder.Entity("api.Entities.Deployments.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("SelectedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId")
                        .IsUnique();

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("api.Entities.Deployments.ProcessItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NextSequence")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("NextSequenceDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ProcessItems");
                });

            modelBuilder.Entity("api.Entities.Finance.COA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountClass")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Divn")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<long>("OpBalance")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountName")
                        .IsUnique();

                    b.ToTable("COAs");
                });

            modelBuilder.Entity("api.Entities.Finance.FinanceVoucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountName")
                        .HasColumnType("TEXT");

                    b.Property<long>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("COAId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Divn")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Narration")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("VoucherDated")
                        .HasColumnType("TEXT");

                    b.Property<int>("VoucherNo")
                        .HasMaxLength(10)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FinanceVouchers");
                });

            modelBuilder.Entity("api.Entities.Finance.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountName")
                        .HasColumnType("TEXT");

                    b.Property<long>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("COAId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Divn")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Narration")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("VoucherDated")
                        .HasColumnType("TEXT");

                    b.Property<int>("VoucherNo")
                        .HasMaxLength(10)
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttachmentSizeInBytes")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateUploaded")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadedByUsername")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("VoucherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VoucherId");

                    b.HasIndex("FileName", "VoucherId")
                        .IsUnique();

                    b.ToTable("VoucherAttachments");
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountName")
                        .HasColumnType("TEXT");

                    b.Property<int>("COAId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Cr")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Dr")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DrEntryApproved")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DrEntryApprovedByEmployeeById")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DrEntryApprovedOn")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("FinanceVoucherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Narration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("TransDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FinanceVoucherId");

                    b.ToTable("VoucherEntries");
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountName")
                        .HasColumnType("TEXT");

                    b.Property<int>("COAId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Cr")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Dr")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DrEntryApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DrEntryApprovedByAppUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("DrEntryApprovedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Narration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("TransDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("VoucherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherItems");
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentQBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId")
                        .IsUnique();

                    b.ToTable("AssessmentQBanks");
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentQStdd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Question")
                        .IsUnique();

                    b.HasIndex("QuestionNo")
                        .IsUnique();

                    b.ToTable("AssessmentQStdds");
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentStddQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssessmentQBankId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStandardQ")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentQBankId");

                    b.ToTable("AssessmentStddQs");
                });

            modelBuilder.Entity("api.Entities.HR.CVRef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HRExecUsername")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefStatus")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("RefStatusDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ReferredOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectionStatus")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("SelectionStatusDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId", "CandidateId")
                        .IsUnique();

                    b.ToTable("CVRefs");
                });

            modelBuilder.Entity("api.Entities.HR.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AadharNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationNo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ecnr")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<bool>("NotificationDesired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pin")
                        .HasColumnType("TEXT");

                    b.Property<string>("PpNo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Qualifications")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessResult")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AssessedByEmployeeName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("AssessedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChecklistHRId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequireInternalReview")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskIdDocControllerAdmin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("CandidateId", "OrderItemId")
                        .IsUnique();

                    b.ToTable("CandidateAssessments");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AssessedOnTheParameter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentGroup")
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateAssessmentId");

                    b.ToTable("CandidatesItemAssessments");
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChargesAgreed")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("CheckedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ChecklistedOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExceptionApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExceptionApprovedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExceptionApprovedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("HRExecUsername")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserComments")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("OrderItemId", "CandidateId")
                        .IsUnique();

                    b.ToTable("ChecklistHRs");
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHRItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Accepts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChecklistHRId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exceptions")
                        .HasColumnType("TEXT");

                    b.Property<bool>("MandatoryTrue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameter")
                        .HasColumnType("TEXT");

                    b.Property<string>("Response")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistHRId");

                    b.ToTable("ChecklistHRItems");
                });

            modelBuilder.Entity("api.Entities.HR.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChargesFixed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractPeriodInMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FoodAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FoodNotProvided")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FoodProvidedFree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HousingAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HousingNotProvided")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HousingProvidedFree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeaveAirfareEntitlementAfterMonths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LeavePerYearInDays")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("OfferAcceptanceConcludedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferAcceptanceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferAccepted")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferAttachmentUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferConclusionRegisteredByUsername")
                        .HasColumnType("TEXT");

                    b.Property<int>("OtherAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Salary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("SelectedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("SelectionDecisionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransportAllowance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TransportNotProvided")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TransportProvidedFree")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeeklyHours")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId")
                        .IsUnique();

                    b.HasIndex("SelectionDecisionId")
                        .HasFilter("SelectionDecisionId is NOT NULL");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("api.Entities.HR.HRSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("HRSkills");
                });

            modelBuilder.Entity("api.Entities.HR.OrderAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DesignedByUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderAssessments");
                });

            modelBuilder.Entity("api.Entities.HR.OrderItemAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("AssessmentRef")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateDesigned")
                        .HasColumnType("TEXT");

                    b.Property<string>("DesignedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequireCandidateAssessment")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderAssessmentId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("orderItemAssessments");
                });

            modelBuilder.Entity("api.Entities.HR.OtherSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("OtherSkills");
                });

            modelBuilder.Entity("api.Entities.HR.SelectionDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charges")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("SelectedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectionStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CVRefId")
                        .IsUnique();

                    b.ToTable("SelectionDecisions");
                });

            modelBuilder.Entity("api.Entities.HR.UserAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttachmentType")
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadedLocation")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("UploadedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadedbyUserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserAttachments");
                });

            modelBuilder.Entity("api.Entities.HR.UserExp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CurrentJob")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Employer")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MonthlySalaryDrawn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<string>("SalaryCurrency")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("WorkedFrom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("WorkedUpto")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserExps");
                });

            modelBuilder.Entity("api.Entities.HR.UserPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("api.Entities.HR.UserProfession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndustryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("UserProfessions");
                });

            modelBuilder.Entity("api.Entities.HR.UserQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QualificationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserQualifications");
                });

            modelBuilder.Entity("api.Entities.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("api.Entities.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Position")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("api.Entities.Identity.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("api.Entities.Master.CategoryAssessmentQBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessmentParameter")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssessmentQBankId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStandardQ")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CategoryAssessmentQBanks");
                });

            modelBuilder.Entity("api.Entities.Master.ChecklistHRData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameter")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ChecklistHRDatas");
                });

            modelBuilder.Entity("api.Entities.Master.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IndustryName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IndustryName")
                        .IsUnique();

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("api.Entities.Master.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfessionName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionName")
                        .IsUnique();

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("api.Entities.Master.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualificationName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QualificationName")
                        .IsUnique();

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("api.Entities.Master.SkillData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkillName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SkillDatas");
                });

            modelBuilder.Entity("api.Entities.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BCCEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("CCEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("MessageComposedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("MessageSentOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageType")
                        .HasColumnType("TEXT");

                    b.Property<int>("RecipientAppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientEmail")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("TEXT");

                    b.Property<int>("SenderAppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderEmail")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("api.Entities.Messages.MessageComposeSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LineText")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mode")
                        .HasColumnType("TEXT");

                    b.Property<int>("SrNo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MessageComposeSources");
                });

            modelBuilder.Entity("api.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("api.Entities.Tasks.AppTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApplicationNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssignedToUsername")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CVRefId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CandidateAssessmentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("CompleteBy")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("CompletedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HistoryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostTaskAction")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResumeId")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("TaskDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskOwnerUsername")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TaskType");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("api.Entities.Tasks.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NextFollowupByName")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("NextFollowupOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskItemDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppTaskId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("api.Entities.UserLike", b =>
                {
                    b.Property<int>("SourceUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SourceUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("UserLike");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("api.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Client.AgencySpecialty", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.Customer", null)
                        .WithMany("AgencySpecialties")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerIndustry", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.Customer", "Customer")
                        .WithMany("CustomerIndustries")
                        .HasForeignKey("CustomerId");

                    b.HasOne("api.Entities.Admin.Client.CustomerOfficial", null)
                        .WithMany("CustomerIndustries")
                        .HasForeignKey("CustomerOfficialId");

                    b.HasOne("api.Entities.Master.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.Navigation("Customer");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerOfficial", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.Customer", null)
                        .WithMany("CustomerOfficials")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerReviewItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.CustomerReview", null)
                        .WithMany("CustomerReviewItems")
                        .HasForeignKey("CustomerReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.FeedbackItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Feedback", null)
                        .WithMany("FeedbackItems")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReview", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.Order", "Order")
                        .WithOne("ContractReview")
                        .HasForeignKey("api.Entities.Admin.Order.ContractReview", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.ContractReview", null)
                        .WithMany("ContractReviewItems")
                        .HasForeignKey("ContractReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Admin.Order.OrderItem", null)
                        .WithOne("ContractReviewItem")
                        .HasForeignKey("api.Entities.Admin.Order.ContractReviewItem", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItemQ", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.ContractReviewItem", null)
                        .WithMany("ContractReviewItemQs")
                        .HasForeignKey("ContractReviewItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.JobDescription", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderItem", null)
                        .WithOne("JobDescription")
                        .HasForeignKey("api.Entities.Admin.Order.JobDescription", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Order", b =>
                {
                    b.HasOne("api.Entities.Admin.Client.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategory", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderForwardToAgent", null)
                        .WithMany("OrderForwardCategories")
                        .HasForeignKey("OrderForwardToAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategoryOfficial", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderForwardCategory", null)
                        .WithMany("OrderForwardCategoryOfficials")
                        .HasForeignKey("OrderForwardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardToAgent", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.Order", null)
                        .WithMany("DLForwarded")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderItem", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Master.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderItemAssessmentQ", b =>
                {
                    b.HasOne("api.Entities.HR.OrderItemAssessment", null)
                        .WithMany("OrderItemAssessmentQs")
                        .HasForeignKey("OrderItemAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Admin.Order.OrderItem", null)
                        .WithMany("OrderItemAssessmentQs")
                        .HasForeignKey("OrderItemId");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Remuneration", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderItem", null)
                        .WithOne("Remuneration")
                        .HasForeignKey("api.Entities.Admin.Order.Remuneration", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Admin.UserHistoryItem", b =>
                {
                    b.HasOne("api.Entities.Admin.UserHistory", null)
                        .WithMany("UserHistoryItems")
                        .HasForeignKey("UserHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Deployments.Dep", b =>
                {
                    b.HasOne("api.Entities.HR.CVRef", "CVRef")
                        .WithMany()
                        .HasForeignKey("CVRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVRef");
                });

            modelBuilder.Entity("api.Entities.Deployments.DepItem", b =>
                {
                    b.HasOne("api.Entities.Deployments.Dep", null)
                        .WithMany("DepItems")
                        .HasForeignKey("DepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Deployments.Process", b =>
                {
                    b.HasOne("api.Entities.HR.CVRef", "CVRef")
                        .WithOne("Process")
                        .HasForeignKey("api.Entities.Deployments.Process", "CVRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVRef");
                });

            modelBuilder.Entity("api.Entities.Deployments.ProcessItem", b =>
                {
                    b.HasOne("api.Entities.Deployments.Process", null)
                        .WithMany("ProcessItems")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherAttachment", b =>
                {
                    b.HasOne("api.Entities.Finance.Voucher", "Voucher")
                        .WithMany("VoucherAttachments")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherEntry", b =>
                {
                    b.HasOne("api.Entities.Finance.FinanceVoucher", null)
                        .WithMany("VoucherEntries")
                        .HasForeignKey("FinanceVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Finance.VoucherItem", b =>
                {
                    b.HasOne("api.Entities.Finance.Voucher", null)
                        .WithMany("VoucherItems")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentStddQ", b =>
                {
                    b.HasOne("api.Entities.HR.AssessmentQBank", null)
                        .WithMany("AssessmentStddQs")
                        .HasForeignKey("AssessmentQBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.Candidate", b =>
                {
                    b.HasOne("api.Entities.HR.CVRef", null)
                        .WithMany("Candidates")
                        .HasForeignKey("CVRefId");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessment", b =>
                {
                    b.HasOne("api.Entities.Admin.Order.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessmentItem", b =>
                {
                    b.HasOne("api.Entities.HR.CandidateAssessment", null)
                        .WithMany("CandidateAssessmentItems")
                        .HasForeignKey("CandidateAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHR", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Admin.Order.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHRItem", b =>
                {
                    b.HasOne("api.Entities.HR.ChecklistHR", null)
                        .WithMany("ChecklistHRItems")
                        .HasForeignKey("ChecklistHRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.HRSkill", b =>
                {
                    b.HasOne("api.Entities.Admin.Employee", "Employee")
                        .WithMany("HRSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("api.Entities.HR.OrderItemAssessment", b =>
                {
                    b.HasOne("api.Entities.HR.OrderAssessment", null)
                        .WithMany("OrderItemAssessments")
                        .HasForeignKey("OrderAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("api.Entities.HR.OtherSkill", b =>
                {
                    b.HasOne("api.Entities.Admin.Employee", "Employee")
                        .WithMany("OtherSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("api.Entities.HR.SelectionDecision", b =>
                {
                    b.HasOne("api.Entities.HR.CVRef", "CVRef")
                        .WithMany()
                        .HasForeignKey("CVRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVRef");
                });

            modelBuilder.Entity("api.Entities.HR.UserAttachment", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserAttachments")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.UserExp", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserExperiences")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.UserPhone", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserPhones")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.HR.UserProfession", b =>
                {
                    b.HasOne("api.Entities.HR.Candidate", null)
                        .WithMany("UserProfessions")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Identity.AppUserRole", b =>
                {
                    b.HasOne("api.Entities.Identity.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Identity.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Entities.Messages.Message", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.HasOne("api.Entities.Identity.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("api.Entities.Photo", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", "AppUser")
                        .WithMany("photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("api.Entities.Tasks.TaskItem", b =>
                {
                    b.HasOne("api.Entities.Tasks.AppTask", null)
                        .WithMany("TaskItems")
                        .HasForeignKey("AppTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.UserLike", b =>
                {
                    b.HasOne("api.Entities.Identity.AppUser", "SourceUser")
                        .WithMany("LikedUsers")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Identity.AppUser", "TargetUser")
                        .WithMany("LikedByUsers")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.Customer", b =>
                {
                    b.Navigation("AgencySpecialties");

                    b.Navigation("CustomerIndustries");

                    b.Navigation("CustomerOfficials");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerOfficial", b =>
                {
                    b.Navigation("CustomerIndustries");
                });

            modelBuilder.Entity("api.Entities.Admin.Client.CustomerReview", b =>
                {
                    b.Navigation("CustomerReviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Employee", b =>
                {
                    b.Navigation("HRSkills");

                    b.Navigation("OtherSkills");
                });

            modelBuilder.Entity("api.Entities.Admin.Feedback", b =>
                {
                    b.Navigation("FeedbackItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReview", b =>
                {
                    b.Navigation("ContractReviewItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.ContractReviewItem", b =>
                {
                    b.Navigation("ContractReviewItemQs");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.Order", b =>
                {
                    b.Navigation("ContractReview");

                    b.Navigation("DLForwarded");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardCategory", b =>
                {
                    b.Navigation("OrderForwardCategoryOfficials");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderForwardToAgent", b =>
                {
                    b.Navigation("OrderForwardCategories");
                });

            modelBuilder.Entity("api.Entities.Admin.Order.OrderItem", b =>
                {
                    b.Navigation("ContractReviewItem");

                    b.Navigation("JobDescription");

                    b.Navigation("OrderItemAssessmentQs");

                    b.Navigation("Remuneration");
                });

            modelBuilder.Entity("api.Entities.Admin.UserHistory", b =>
                {
                    b.Navigation("UserHistoryItems");
                });

            modelBuilder.Entity("api.Entities.Deployments.Dep", b =>
                {
                    b.Navigation("DepItems");
                });

            modelBuilder.Entity("api.Entities.Deployments.Process", b =>
                {
                    b.Navigation("ProcessItems");
                });

            modelBuilder.Entity("api.Entities.Finance.FinanceVoucher", b =>
                {
                    b.Navigation("VoucherEntries");
                });

            modelBuilder.Entity("api.Entities.Finance.Voucher", b =>
                {
                    b.Navigation("VoucherAttachments");

                    b.Navigation("VoucherItems");
                });

            modelBuilder.Entity("api.Entities.HR.AssessmentQBank", b =>
                {
                    b.Navigation("AssessmentStddQs");
                });

            modelBuilder.Entity("api.Entities.HR.CVRef", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("api.Entities.HR.Candidate", b =>
                {
                    b.Navigation("UserAttachments");

                    b.Navigation("UserExperiences");

                    b.Navigation("UserPhones");

                    b.Navigation("UserProfessions");
                });

            modelBuilder.Entity("api.Entities.HR.CandidateAssessment", b =>
                {
                    b.Navigation("CandidateAssessmentItems");
                });

            modelBuilder.Entity("api.Entities.HR.ChecklistHR", b =>
                {
                    b.Navigation("ChecklistHRItems");
                });

            modelBuilder.Entity("api.Entities.HR.OrderAssessment", b =>
                {
                    b.Navigation("OrderItemAssessments");
                });

            modelBuilder.Entity("api.Entities.HR.OrderItemAssessment", b =>
                {
                    b.Navigation("OrderItemAssessmentQs");
                });

            modelBuilder.Entity("api.Entities.Identity.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("api.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("LikedByUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("UserRoles");

                    b.Navigation("photos");
                });

            modelBuilder.Entity("api.Entities.Tasks.AppTask", b =>
                {
                    b.Navigation("TaskItems");
                });
#pragma warning restore 612, 618
        }
    }
}
